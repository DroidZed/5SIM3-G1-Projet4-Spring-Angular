pipeline {
    agent any

    environment {
        dockerhubcredential             = 'dockerhubcredential'
        registry                        = 'yassinemessaoud/medyassinemessaoud-5sim3-g1-projet4-spring-angular'
        SONAR_TOKEN                     = credentials('tokensonarqube')
        dockerImage                     = ''
    }

    stages {
        stage('Clean') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn clean"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn validate"
                        sh "mvn compile"
                        sh "mvn package -DskipTests"
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        script {
                            // sh "docker build -t medyassinemessaoud-5sim3-g1-projet4-spring-angular:1.1.0 ."
                            dockerImage = docker.build registry + ":1.0.0"
                    }
                    }
                }
            }
        }
        stage('Docker Push') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        script {
                            // Uncomment these lines for debugging purposes
                            sh "docker login -u ${dockerhubcredential_USR} -p ${dockerhubcredential_PSW}"
                            def pushCommand = "docker push ${registry}:1.0.0"
                            def pushOutput = sh(script: pushCommand, returnStatus: true)

                            if (pushOutput == 0) {
                                echo "Docker Push Succeeded"
                            } else {
                                error "Docker Push Failed. Command Output: $pushOutput"
                            }
                        }
                    }
                }
            }
        }
        stage("Docker Compose") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh "docker compose up -d"
                }
            }
        }
        stage('Spring Test code') {
            steps {
                dir("DevOps_Project") {
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                     sh 'mvn test -Dspring.datasource.url=jdbc:mysql://localhost:3306/devops?createDatabaseIfNotExist=true -Dtest="OperatorServiceImplTest"'
                  }
               }
           }
        }
        stage('Code Coverage') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn jacoco:report"
                    }
                }
            }
        }
        stage('Sonar') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn sonar:sonar -Dsonar.token=$SONAR_TOKEN"
                    }
                }
            }
        }
        stage('Nexus') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn deploy -DskipTests"
                    }
                }
            }
        }
    }
}
