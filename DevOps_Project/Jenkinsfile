def SendHook(body) {
    def curlCommand = """
        curl -L -X POST -H "Content-Type: application/json" -d '$body' https://disco-hooker.onrender.com/hook
    """

    def response = sh(script: curlCommand, returnStatus: true)

    println("Exit Code: ${response}")
}

def GetBody(stageName, stageState) {
    if (stageState == 'FAILURE') {
        return """
            {
                "title": "Pipeline Spring",
                "msg": "One or more jobs **failed**:",
                "status": 0,
                "jobs": [
                    {
                        "name": "${stageName}", "value": "ðŸ’¢ FAIL"
                    }
                ]
            }
        """
    } else {
        return """
            {
                "title": "Pipeline Spring",
                "msg": "One or more jobs **passed**:",
                "status": 1,
                "jobs": [
                    {
                        "name": "${stageName}", "value": "ðŸ’š PASS"
                    }
                ]
            }
        """
    }
}

pipeline {
    agent any

    environment {
        IMAGE_TAG                       = '1.0.0'
        dockerCredentials               = 'DOCKER_CREDS'
        registry                        = 'droidzed/aymendhahri-5sim3-g1-projet4-spring-angular'
        dockerImage                     = ''
        DISCORD_WEBHOOK_URL             = credentials("DISCORD_WEBHOOK_URL")
    }

    stages {
        stage('Tidying things up') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Cleaning...'
                        sh "mvn clean"
                        script {
                            SendHook(GetBody("Tidying things up", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage('Building the code') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Validating...'
                        sh "mvn validate"
                        echo 'Compiling...'
                        sh "mvn compile"
                        script {
                            SendHook(GetBody("Building the code", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage('Deploy Artefact') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Deploying to nexus...'
                        sh "mvn clean deploy -DskipTests"
                        script {
                            SendHook(GetBody("Deploy Artefact", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage('Docker Image - Building') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Building the docker image...'
                        script { 
                            dockerImage = docker.build registry + ":$IMAGE_TAG"
                            SendHook(GetBody("Docker Image - Building", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage('Docker Image - Pushing To Registry') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Pushing the docker image to docker hub...'
                        script {
                            docker.withRegistry('', dockerCredentials) { dockerImage.push() }
                            SendHook(GetBody("Docker Image - Pushing To Registry", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage("Discord Notify") {
            steps {
                script {
                    def body = """
                                {
                                  "title": "Pipeline Spring",
                                  "msg": "Pipeline ran **smoothly**",
                                  "status": 1
                                }
                        """

                    SendHook(body)
                }
            }
        }
    }
}
