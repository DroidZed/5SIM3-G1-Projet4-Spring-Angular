pipeline {
    agent any

    environment {
        dockerCredentials               = 'dockerCredentials'
        registry                        = 'islmm/islemnaffeti-5sim3-g1-projet4-spring-angular'
        dockerImage                     = ''
        sonarToken                      = credentials('sonarToken')
        MY_EMAIL                        = 'islem.naffeti@esprit.tn'
    }

    stages {
        stage('Clean Projects') {
            steps {
                dir("DevOps_Project") {
                    sh "mvn clean"
                }
            }
        }
        stage('Building project') {
            steps {
                dir("DevOps_Project") {
                    sh "mvn validate"
                    sh "mvn compile"
                }
            }
        }
        stage('Docker Image') {
            steps {
                    dir("DevOps_Project") {
                        script {
                            dockerImage = docker.build registry + ":1.0.0"
                    }
                }
            }
        }
        stage('Docker Push to hub') {
            steps {
                dir("DevOps_Project") {
                    script {
                        docker.withRegistry('', dockerCredentials) { dockerImage.push() }
                    }
                }
            }
        }
        stage('Test the code') {
            steps {
                dir("DevOps_Project") {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "docker run -d --name test_sql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7"
                        sh 'mvn test -Dspring.profiles.active=test -Dtest="StockServiceImplTest"'
                    }
                }
            }
        }
        stage('Jacoco') {
             steps {
                dir("DevOps_Project") {
                    sh "mvn jacoco:report"
                }
             }
        }
        stage('SONAR') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn sonar:sonar -Dsonar.token=$sonarToken"
                    }
                }
            }
        }
        stage('Nexus') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn deploy -DskipTests"
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "docker stop test_sql"
                        sh "docker rm test_sql"
                }
            }
        }
    }

    post {
        success {
            mail bcc: '',
            body: '''
            'Dear Islem ,
            we are happy to inform you that your pipeline ran successfully.
            Good job!
                -Jenkins Team.''',
            cc: '',
            from: "$MY_EMAIL",
            replyTo: '',
            subject: 'Spring Pipeline - Build Finished - Success',
            to: "$MY_EMAIL"
        }

        failure {
            mail bcc: '',
            body: '''
            'Dear Islem,
            we are sorry to inform you that your pipeline build failed.
            Keep working!
                -Jenkins Team - ''',
            cc: '',
            from: "$MY_EMAIL",
            replyTo: '',
            subject: 'Spring Pipeline - Build Finished - Failure',
            to: "$MY_EMAIL"
        }

        always {
            emailext attachLog: true,
            body: '', subject: 'Build finished',
            from: "$MY_EMAIL",
            to: "$MY_EMAIL"
            cleanWs()
        }
    }
}