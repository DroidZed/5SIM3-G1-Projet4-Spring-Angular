pipeline {
    agent any

    environment {
        dockerCredentials               = 'dockerToken'
        registry                        = 'messaoudi123/mohamedmassoueed-5sim3-g1-projet4-spring-angular'
        dockerImage                     = ''
        sonarToken                      = credentials('sonarToken')
    }


  stages {
        stage('Clean') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn clean"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn validate"
                        sh "mvn compile"
                        sh "mvn package -DskipTests"
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        script {

                            dockerImage = docker.build registry + ":1.0.0"
                    }
                    }
                }
            }
        }
     stage('Docker Push to hub') {
                 steps {
                     dir("DevOps_Project") {
                         script {
                             docker.withRegistry('', dockerCredentials) { dockerImage.push() }
                         }
                     }
                 }
             }
        stage('backend Test code') {
            steps {
                dir("DevOps_Project") {
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                     sh 'mvn test -Dspring.datasource.url=jdbc:mysql://localhost:3306/devops?createDatabaseIfNotExist=true -Dtest="StockServiceImpl"'
                  }
               }
           }
        }
        stage('Code ') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn jacoco:report"
                    }
                }
            }
        }
        stage('Sonar ') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn sonar:sonar -Dsonar.token=$SONAR_TOKEN"
                    }
                }
            }
        }

        stage('Nexus Deploy') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn deploy -DskipTests"
                    }
                }
            }
        }


    }
}
