pipeline {
    agent any

    environment {
        dockerCredentials               = 'dockerhubcredential'
        registry                        = 'yassinemessaoud/medyassinemessaoud-5sim3-g1-projet4-spring-angular'
        dockerImage                     = ''
        SONAR_TOKEN                     = credentials('tokensonarqube')
    }

    stages {
        stage('Clean') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn clean"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn validate"
                        sh "mvn compile"
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        script {
                            sh "docker build -t medyassinemessaoud-5sim3-g1-projet4-spring-angular:1.1.0 ."
                    }
                    }
                }
            }
        }
        stage('Docker Push') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        script {
                          sh "docker login -u ${dockerhubcredential_USR} -p ${dockerhubcredential_PSW}"
                            sh "docker push yassinemessaoud/medyassinemessaoud-5sim3-g1-projet4-spring-angular:1.1.0"
                        }
                    }
                }
            }
        }
        stage('Spring Test code') {
                    steps {
                        dir("DevOps_Project") {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                sh 'mvn test -Dspring.profiles.active=test -Dtest="OperatorServiceImplTest"'
                            }
                        }
                    }
                }
        stage('Code Coverage') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn jacoco:report"
                    }
                }
            }
        }
        stage('Sonar') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn sonar:sonar -Dsonar.token=$SONAR_TOKEN"
                    }
                }
            }
        }
        stage('Nexus') {
            steps {
                dir("DevOps_Project") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        sh "mvn deploy -DskipTests"
                    }
                }
            }
        }
        stage("Docker Compose") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh "docker compose up -d"
                }
            }
        }
    }
}
