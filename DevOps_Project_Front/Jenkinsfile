def SendHook(body) {
    def curlCommand = """
        curl -L -X POST -H "Content-Type: application/json" -d '$body' https://disco-hooker.onrender.com/hook
    """

    def response = sh(script: curlCommand, returnStatus: true)

    println("Exit Code: ${response}")
}

def GetBody(stageName, stageState) {
    if (stageState == 'FAILURE') {
        return """
            {
                "title": "Pipeline Angular",
                "msg": "One or more jobs **failed**:",
                "status": 0,
                "jobs": [
                    {
                        "name": "${stageName}", "value": "ðŸ’¢ FAIL"
                    }
                ]
            }
        """
    } else {
        return """
            {
                "title": "Pipeline Angular",
                "msg": "One or more jobs **passed**:",
                "status": 1,
                "jobs": [
                    {
                        "name": "${stageName}", "value": "ðŸ’š PASS"
                    }
                ]
            }
        """
    }
}

pipeline {
    agent any

    environment {
        IMAGE_TAG                       = '1.0.0'
        dockerCredentials               = 'DOCKER_CREDS'
        registry                        = 'droidzed/devops-project-front'
        dockerImage                     = ''
        DISCORD_WEBHOOK_URL             = credentials("DISCORD_WEBHOOK_URL")
    }

    stages {
        stage('Installing Dependencies') {
            steps {
                dir("DevOps_Project_Front") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Installing dependencies..'
                        nodejs(nodeJSInstallationName: 'nodejs') {
                            sh "npm ci"
                            script {
                                SendHook(GetBody("Installing Dependencies", "${currentBuild.currentResult}"))
                            }
                        }
                    }
                }
            }
        }
        stage('Test Angular') {
            steps {
                dir("DevOps_Project_Front") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo 'Testing..'
                        nodejs(nodeJSInstallationName: 'nodejs') {
                            sh "npm run test"
                            script {
                                SendHook(GetBody("Test Angular", "${currentBuild.currentResult}"))
                            }
                        }
                    }
                }
            }
        }
        stage("DOCKER IMAGE BUILD") {
            steps {
                dir("DevOps_Project_Front") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo "Building angular image..."
                        script {
                            dockerImage = docker.build registry + ":$IMAGE_TAG"
                            SendHook(GetBody("DOCKER IMAGE BUILD", "${currentBuild.currentResult}"))
                        }
                    }
                }
            }
        }
        stage("DOCKER IMAGE PUSH TO HUB") {
            steps {
                dir("DevOps_Project_Front") {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        echo "Pushing angular image to hub..."  
                        script {
                            docker.withRegistry('', dockerCredentials) { dockerImage.push() }
                            SendHook(GetBody("DOCKER IMAGE PUSH TO HUB", "${currentBuild.currentResult}"))
                        } 
                    }
                }
            }
        }
        stage("Discord Notify") {
            steps {
                script {
                    def body = """
                                {
                                  "title": "Pipeline Angular",
                                  "msg": "Pipeline ran **smoothly**",
                                  "status": 1
                                }
                        """

                    SendHook(body)
                }
            }
        }
    }
}
